// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.articles.sql

package queries

import (
	"context"
	"database/sql"
)

const getArticle = `-- name: GetArticle :one
SELECT id, user_id, page_id, state, reason, content, created, updated FROM articles WHERE id = ?
`

func (q *Queries) GetArticle(ctx context.Context, id string) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PageID,
		&i.State,
		&i.Reason,
		&i.Content,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const newArticle = `-- name: NewArticle :exec
INSERT INTO articles (id, user_id, page_id) VALUES (?, ?, ?)
`

type NewArticleParams struct {
	ID     string
	UserID string
	PageID string
}

func (q *Queries) NewArticle(ctx context.Context, arg NewArticleParams) error {
	_, err := q.db.ExecContext(ctx, newArticle, arg.ID, arg.UserID, arg.PageID)
	return err
}

const updateArticleFailure = `-- name: UpdateArticleFailure :exec
UPDATE articles
SET state = 'failed',
	reason = ?,
	content = NULL,
	updated = CURRENT_TIMESTAMP
WHERE page_id = ?
`

type UpdateArticleFailureParams struct {
	Reason sql.NullString
	PageID string
}

func (q *Queries) UpdateArticleFailure(ctx context.Context, arg UpdateArticleFailureParams) error {
	_, err := q.db.ExecContext(ctx, updateArticleFailure, arg.Reason, arg.PageID)
	return err
}

const updateArticleSuccess = `-- name: UpdateArticleSuccess :exec
UPDATE articles
SET state = 'success',
	content = ?,
	updated = CURRENT_TIMESTAMP
WHERE page_id = ?
`

type UpdateArticleSuccessParams struct {
	Content []byte
	PageID  string
}

func (q *Queries) UpdateArticleSuccess(ctx context.Context, arg UpdateArticleSuccessParams) error {
	_, err := q.db.ExecContext(ctx, updateArticleSuccess, arg.Content, arg.PageID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.readings.sql

package queries

import (
	"context"
	"database/sql"
)

const getAllReadingInfo = `-- name: GetAllReadingInfo :many
SELECT pages.id, pages.user_id, pages.url, pages.title, pages.description, pages.image_url, pages.preview_state, pages.created, pages.updated, pages.readable, articles.id, articles.user_id, articles.page_id, articles.state, articles.reason, articles.content, articles.created, articles.updated, readings.id, readings.user_id, readings.article_id, readings.job_id, readings.state, readings.reason, readings.created, readings.updated
FROM pages
INNER JOIN articles
ON page.id = article.page_id
LEFT JOIN readings
ON article.id = reading.article_id
WHERE pages.user_id = ?
`

type GetAllReadingInfoRow struct {
	Page    Page
	Article Article
	Reading Reading
}

func (q *Queries) GetAllReadingInfo(ctx context.Context, userID string) ([]GetAllReadingInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllReadingInfo, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReadingInfoRow
	for rows.Next() {
		var i GetAllReadingInfoRow
		if err := rows.Scan(
			&i.Page.ID,
			&i.Page.UserID,
			&i.Page.Url,
			&i.Page.Title,
			&i.Page.Description,
			&i.Page.ImageUrl,
			&i.Page.PreviewState,
			&i.Page.Created,
			&i.Page.Updated,
			&i.Page.Readable,
			&i.Article.ID,
			&i.Article.UserID,
			&i.Article.PageID,
			&i.Article.State,
			&i.Article.Reason,
			&i.Article.Content,
			&i.Article.Created,
			&i.Article.Updated,
			&i.Reading.ID,
			&i.Reading.UserID,
			&i.Reading.ArticleID,
			&i.Reading.JobID,
			&i.Reading.State,
			&i.Reading.Reason,
			&i.Reading.Created,
			&i.Reading.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReadingsByUser = `-- name: GetReadingsByUser :many
SELECT id, user_id, article_id, job_id, state, reason, created, updated FROM readings
WHERE user_id = ?
`

func (q *Queries) GetReadingsByUser(ctx context.Context, userID string) ([]Reading, error) {
	rows, err := q.db.QueryContext(ctx, getReadingsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reading
	for rows.Next() {
		var i Reading
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ArticleID,
			&i.JobID,
			&i.State,
			&i.Reason,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newReading = `-- name: NewReading :one
INSERT INTO readings 
	(id, user_id, article_id, job_id, state) 
VALUES 
	(?, ?, ?, ?, ?)
RETURNING id, user_id, article_id, job_id, state, reason, created, updated
`

type NewReadingParams struct {
	ID        string
	UserID    string
	ArticleID string
	JobID     string
	State     string
}

func (q *Queries) NewReading(ctx context.Context, arg NewReadingParams) (Reading, error) {
	row := q.db.QueryRowContext(ctx, newReading,
		arg.ID,
		arg.UserID,
		arg.ArticleID,
		arg.JobID,
		arg.State,
	)
	var i Reading
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ArticleID,
		&i.JobID,
		&i.State,
		&i.Reason,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateReading = `-- name: UpdateReading :exec
UPDATE readings
SET state = ?,
	reason = ?,
	updated = CURRENT_TIMESTAMP
`

type UpdateReadingParams struct {
	State  string
	Reason sql.NullString
}

func (q *Queries) UpdateReading(ctx context.Context, arg UpdateReadingParams) error {
	_, err := q.db.ExecContext(ctx, updateReading, arg.State, arg.Reason)
	return err
}

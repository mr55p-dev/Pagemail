// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.mail.sql

package queries

import (
	"context"
	"time"
)

const createSchedule = `-- name: CreateSchedule :exec
INSERT INTO schedules (user_id, timezone, days, hour, minute) 
VALUES (?, ?, ?, ?, ?)
RETURNING id
`

type CreateScheduleParams struct {
	UserID   string
	Timezone string
	Days     int64
	Hour     int64
	Minute   int64
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) error {
	_, err := q.db.ExecContext(ctx, createSchedule,
		arg.UserID,
		arg.Timezone,
		arg.Days,
		arg.Hour,
		arg.Minute,
	)
	return err
}

const readSchedules = `-- name: ReadSchedules :many
SELECT id, user_id, timezone, days, hour, minute, last_sent FROM schedules
`

func (q *Queries) ReadSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, readSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Timezone,
			&i.Days,
			&i.Hour,
			&i.Minute,
			&i.LastSent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScheduleLastSent = `-- name: UpdateScheduleLastSent :exec
UPDATE schedules
SET last_sent = ?
WHERE user_id = ?
`

type UpdateScheduleLastSentParams struct {
	LastSent time.Time
	UserID   string
}

func (q *Queries) UpdateScheduleLastSent(ctx context.Context, arg UpdateScheduleLastSentParams) error {
	_, err := q.db.ExecContext(ctx, updateScheduleLastSent, arg.LastSent, arg.UserID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.pages.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createPage = `-- name: CreatePage :one
INSERT INTO pages (id, user_id, url, preview_state)
VALUES (?, ?, ?, 'unknown')
RETURNING id, user_id, url, title, description, image_url, preview_state, created, updated, readable
`

type CreatePageParams struct {
	ID     string
	UserID string
	Url    string
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (Page, error) {
	row := q.db.QueryRowContext(ctx, createPage, arg.ID, arg.UserID, arg.Url)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.ImageUrl,
		&i.PreviewState,
		&i.Created,
		&i.Updated,
		&i.Readable,
	)
	return i, err
}

const deletePageById = `-- name: DeletePageById :execrows
DELETE FROM pages 
WHERE id = ?
`

func (q *Queries) DeletePageById(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePageById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deletePageForUser = `-- name: DeletePageForUser :execrows
DELETE FROM pages
WHERE id = ?
AND user_id = ?
`

type DeletePageForUserParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeletePageForUser(ctx context.Context, arg DeletePageForUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePageForUser, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const readPageById = `-- name: ReadPageById :one
SELECT id, user_id, url, title, description, image_url, preview_state, created, updated, readable FROM pages
WHERE id = ?
LIMIT 1
`

func (q *Queries) ReadPageById(ctx context.Context, id string) (Page, error) {
	row := q.db.QueryRowContext(ctx, readPageById, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.ImageUrl,
		&i.PreviewState,
		&i.Created,
		&i.Updated,
		&i.Readable,
	)
	return i, err
}

const readPagesByReadable = `-- name: ReadPagesByReadable :many
SELECT id, user_id, url, title, description, image_url, preview_state, created, updated, readable FROM pages
WHERE readable = ?
AND user_id = ?
`

type ReadPagesByReadableParams struct {
	Readable bool
	UserID   string
}

func (q *Queries) ReadPagesByReadable(ctx context.Context, arg ReadPagesByReadableParams) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, readPagesByReadable, arg.Readable, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.PreviewState,
			&i.Created,
			&i.Updated,
			&i.Readable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readPagesByUserBetween = `-- name: ReadPagesByUserBetween :many
SELECT id, user_id, url, title, description, image_url, preview_state, created, updated, readable FROM pages 
WHERE created BETWEEN ?1 AND ?2
AND user_id = ?3
ORDER BY created DESC
`

type ReadPagesByUserBetweenParams struct {
	Start  time.Time
	End    time.Time
	UserID string
}

func (q *Queries) ReadPagesByUserBetween(ctx context.Context, arg ReadPagesByUserBetweenParams) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, readPagesByUserBetween, arg.Start, arg.End, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.PreviewState,
			&i.Created,
			&i.Updated,
			&i.Readable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readPagesByUserId = `-- name: ReadPagesByUserId :many
SELECT id, user_id, url, title, description, image_url, preview_state, created, updated, readable FROM pages
WHERE user_id = ?
ORDER BY created DESC
LIMIT ? OFFSET ?
`

type ReadPagesByUserIdParams struct {
	UserID string
	Limit  int64
	Offset int64
}

func (q *Queries) ReadPagesByUserId(ctx context.Context, arg ReadPagesByUserIdParams) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, readPagesByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.PreviewState,
			&i.Created,
			&i.Updated,
			&i.Readable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePagePreview = `-- name: UpdatePagePreview :exec
UPDATE pages SET
    title = ?,
    description = ?,
    image_url = ?,
    preview_state = ?,
    updated = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePagePreviewParams struct {
	Title        sql.NullString
	Description  sql.NullString
	ImageUrl     sql.NullString
	PreviewState string
	ID           string
}

func (q *Queries) UpdatePagePreview(ctx context.Context, arg UpdatePagePreviewParams) error {
	_, err := q.db.ExecContext(ctx, updatePagePreview,
		arg.Title,
		arg.Description,
		arg.ImageUrl,
		arg.PreviewState,
		arg.ID,
	)
	return err
}

const updatePageReadability = `-- name: UpdatePageReadability :exec
UPDATE pages SET
    readable = ?,
	updated = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePageReadabilityParams struct {
	Readable bool
	ID       string
}

func (q *Queries) UpdatePageReadability(ctx context.Context, arg UpdatePageReadabilityParams) error {
	_, err := q.db.ExecContext(ctx, updatePageReadability, arg.Readable, arg.ID)
	return err
}

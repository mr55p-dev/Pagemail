// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.users.sql

package queryusers

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id,
    email,
    username,
    subscribed
) VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	ID         string
	Email      string
	Username   string
	Subscribed bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Subscribed,
	)
	return err
}

const readUserByEmail = `-- name: ReadUserByEmail :one
SELECT id, email, username, subscribed, has_readability, created, updated FROM users 
WHERE email = ?
LIMIT 1
`

func (q *Queries) ReadUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, readUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Subscribed,
		&i.HasReadability,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const readUserById = `-- name: ReadUserById :one
SELECT id, email, username, subscribed, has_readability, created, updated FROM users 
WHERE id = ? 
LIMIT 1
`

func (q *Queries) ReadUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, readUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Subscribed,
		&i.HasReadability,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const readUsersWithMail = `-- name: ReadUsersWithMail :many
SELECT id, email, username, subscribed, has_readability, created, updated FROM users 
WHERE subscribed = true
`

func (q *Queries) ReadUsersWithMail(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, readUsersWithMail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Subscribed,
			&i.HasReadability,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserSubscription = `-- name: UpdateUserSubscription :exec
UPDATE users SET 
subscribed = ? 
WHERE id = ?
`

type UpdateUserSubscriptionParams struct {
	Subscribed bool
	ID         string
}

func (q *Queries) UpdateUserSubscription(ctx context.Context, arg UpdateUserSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSubscription, arg.Subscribed, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.users.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    email,
    username
) VALUES ($1, $2, $3)
RETURNING id, email, username, has_readability, created, updated
`

type CreateUserParams struct {
	ID       uuid.UUID
	Email    string
	Username string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HasReadability,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const readUserByEmail = `-- name: ReadUserByEmail :one
SELECT id, email, username, has_readability, created, updated FROM users 
WHERE email = $1
LIMIT 1
`

func (q *Queries) ReadUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, readUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HasReadability,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const readUserById = `-- name: ReadUserById :one
SELECT id, email, username, has_readability, created, updated FROM users 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) ReadUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, readUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HasReadability,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const readUserWithCredential = `-- name: ReadUserWithCredential :one
SELECT users.id, users.email, users.username, users.has_readability, users.created, users.updated 
FROM users
LEFT JOIN auth 
ON users.id = auth.user_id
WHERE users.email = $1
AND auth.platform = $2
AND auth.credential = crypt($3, auth.credential)
`

type ReadUserWithCredentialParams struct {
	Email    string
	Platform string
	Crypt    string
}

func (q *Queries) ReadUserWithCredential(ctx context.Context, arg ReadUserWithCredentialParams) (User, error) {
	row := q.db.QueryRow(ctx, readUserWithCredential, arg.Email, arg.Platform, arg.Crypt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HasReadability,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

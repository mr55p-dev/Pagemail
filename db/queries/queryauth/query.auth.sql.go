// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.auth.sql

package queryauth

import (
	"context"
	"database/sql"
)

const createLocalAuth = `-- name: CreateLocalAuth :exec
INSERT INTO auth (
    user_id,
    platform,
    password_hash
) VALUES (?, 'pagemail', ?)
`

type CreateLocalAuthParams struct {
	UserID       string
	PasswordHash []byte
}

func (q *Queries) CreateLocalAuth(ctx context.Context, arg CreateLocalAuthParams) error {
	_, err := q.db.ExecContext(ctx, createLocalAuth, arg.UserID, arg.PasswordHash)
	return err
}

const createShortcutAuth = `-- name: CreateShortcutAuth :exec
INSERT INTO auth (
    user_id,
    platform,
    credential
) VALUES (?, 'shortcut', ?)
`

type CreateShortcutAuthParams struct {
	UserID     string
	Credential []byte
}

func (q *Queries) CreateShortcutAuth(ctx context.Context, arg CreateShortcutAuthParams) error {
	_, err := q.db.ExecContext(ctx, createShortcutAuth, arg.UserID, arg.Credential)
	return err
}

const readUserByResetToken = `-- name: ReadUserByResetToken :one
SELECT user_id
FROM auth
WHERE password_reset_token = ?
    AND password_reset_expiry > ?
LIMIT 1
`

type ReadUserByResetTokenParams struct {
	PasswordResetToken  []byte
	PasswordResetExpiry sql.NullTime
}

func (q *Queries) ReadUserByResetToken(ctx context.Context, arg ReadUserByResetTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, readUserByResetToken, arg.PasswordResetToken, arg.PasswordResetExpiry)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const updateUserPassword = `-- name: UpdateUserPassword :execrows
UPDATE auth
SET password_hash = ?
WHERE user_id = ?
    AND platform = 'pagemail'
RETURNING user_id
`

type UpdateUserPasswordParams struct {
	PasswordHash []byte
	UserID       string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUserShortcutToken = `-- name: UpdateUserShortcutToken :exec
UPDATE auth
SET credential = ?
WHERE user_id = ?
    AND platform = 'shortcut'
`

type UpdateUserShortcutTokenParams struct {
	Credential []byte
	UserID     string
}

func (q *Queries) UpdateUserShortcutToken(ctx context.Context, arg UpdateUserShortcutTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateUserShortcutToken, arg.Credential, arg.UserID)
	return err
}

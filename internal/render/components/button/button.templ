package button

type Button struct {
	Variant Style
	Link    templ.SafeURL
	Title   string
	Role    Role
}

type Style string
type Role string

type With func(*Button)

const (
	Primary Style = `
		bg-primary-500 text-white
		size-full
		rounded-[32px] p-4 
		text-center content-center
	`
	Secondary Style = `
		bg-secondary-500 text-white
		size-full
		rounded-[32px] p-4
		text-center content-center
	`
	MinPrimary = `
		bg-primary-500 text-white
		size-full text-nowrap 
		rounded-lg py-2 px-4
		text-center content-center
	`
	MinSecondary = `
		bg-primary-500 text-white
		size-full text-nowrap 
		rounded-lg py-2 px-4
		text-center content-center
	`
	MinBad = `
		bg-red-500 text-white
		size-full text-nowrap 
		rounded-lg py-2 px-4
		text-center content-center
	`
	LinkPrimary Style = `
		text-primary-500 
		text-center content-center
	`

	RoleSubmit  Role = "submit"
	RoleDefault Role = "button"
)

func WithVariant(variant Style) With {
	return func(b *Button) {
		b.Variant = variant
	}
}

func WithLink(destination templ.SafeURL) With {
	return func(b *Button) {
		b.Link = destination
	}
}

func WithRole(role Role) With {
	return func(b *Button) {
		b.Role = role
	}
}

func New(text string, opts ...With) templ.Component {
	out := &Button{
		Title:   text,
		Variant: Primary,
		Role:    RoleDefault,
	}
	for _, fn := range opts {
		fn(out)
	}
	if out.Link != "" {
		return out.asLink()
	} else {
		return out.asButton()
	}
}

templ (b *Button) asButton() {
	<button class={ string(b.Variant) } role={ string(b.Role) }>
		<span>{ b.Title }</span>
	</button>
}

templ (b *Button) asLink() {
	if b.Link != "" {
		<a href={ b.Link }>
			<div class={ string(b.Variant) }>
				{ b.Title }
			</div>
		</a>
	}
}

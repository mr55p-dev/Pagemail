---
name: Deploy code to stage
on:
  workflow_dispatch:
  pull_request:
permissions:
  contents: read
env:
  ENV: staging
concurrency:
  group: staging
  cancel-in-progress: true

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.3.x
          cache: npm
          cache-dependency-path: "client/package-lock.json"

      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: ${{ github.workspace }}/client/dist
          key: ${{ runner.os }}-stage-${{ hashFiles('client/**')}}

      - name: Initialize environment
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: make -C client init

      - name: Build code
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: make -C client build

      - uses: actions/cache/save@v3
        if: steps.cache-restore.outputs.cache-hit != 'true'
        id: cache-save
        with:
          path: ${{ github.workspace }}/client/dist
          key: ${{ runner.os }}-stage-${{ hashFiles('client/**')}}

      - name: Store dist artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-frontend
          path: ${{ github.workspace }}/client/dist/

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.20.4"
          cache: true
          cache-dependency-path: server/go.sum

      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: ${{ github.workspace }}/server/dist
          key: ${{ runner.os }}-stage-${{ hashFiles('server/**')}}

      - name: Initialize environment
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: make -C server init

      - name: Build binary
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: make -C server build

      - uses: actions/cache/save@v3
        if: steps.cache-restore.outputs.cache-hit != 'true'
        id: cache-save
        with:
          path: ${{ github.workspace }}/server/dist
          key: ${{ runner.os }}-stage-${{ hashFiles('server/**')}}

      - name: Store build artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-backend
          path: ${{ github.workspace }}/server/dist/

  build-readability:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.3.x
          cache: npm
          cache-dependency-path: "readability/package-lock.json"

      - name: Initialize environment
        run: make -C readability init

      - name: Build code
        run: make -C readability build

      - name: Store dist artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-readability
          path: ${{ github.workspace }}/readability/dist/


  deploy:
    runs-on: ubuntu-latest
    environment: Preview
    needs: [build-frontend, build-backend, build-readability]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download frontend
        uses: actions/download-artifact@v3
        with:
          name: dist-frontend
          path: client-dist/

      - name: Download backend
        uses: actions/download-artifact@v3
        with:
          name: dist-backend
          path: server-dist/

      - name: Download readability
        uses: actions/download-artifact@v3
        with:
          name: dist-readability
          path: readability-dist/

      - name: Copy makefile to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "Makefile"
          target: /home/ec2-user/pagemail

      - name: Clean existing server resources
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd pagemail
            make pre-install-stage

      - name: Copy frontend artifacts onto server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "client-dist/*"
          target: /home/ec2-user/pagemail/client/dist/
          strip_components: 1

      - name: Copy backend artifacts onto server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "server-dist/server"
          target: /home/ec2-user/pagemail/server/dist
          strip_components: 1

      - name: Copy readability artifacts onto server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "readability-dist/*"
          target: /home/ec2-user/pagemail/readability/dist
          strip_components: 1

      - name: Copy server files onto server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "Makefile,nginx/*,services/*,test_pages/*,templates/*"
          target: /home/ec2-user/pagemail

      - name: run install scripts
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.host }}
          username: ${{ secrets.username }}
          key: ${{ secrets.key }}
          port: ${{ secrets.port }}
          script: |
            cd pagemail
            make install-stage

      - name: Run static install scripts
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.host }}
          username: ${{ secrets.username }}
          key: ${{ secrets.key }}
          port: ${{ secrets.port }}
          script: |
            cd pagemail
            make install-nginx
            make install-test-sites
            make install-stage-templates

      - name: Run post install scripts
        if: always()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.host }}
          username: ${{ secrets.username }}
          key: ${{ secrets.key }}
          port: ${{ secrets.port }}
          script: |
            cd pagemail
            make post-install-stage

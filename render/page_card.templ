package render

import (
	"fmt"
	"github.com/mr55p-dev/pagemail/db/queries"
	"github.com/mr55p-dev/pagemail/render/icons"
	"net/url"
	"strings"
)

func formatURL(inp string) string {
	parsed, err := url.Parse(inp)
	if err != nil {
		return inp
	}
	return fmt.Sprintf("%s%s", strings.TrimPrefix(parsed.Host, "www."), parsed.Path)
}

templ PageCard(page queries.Page) {
	<article
		class="
		tw-w-full
		tw-shadow-md
		tw-transition-colors
		tw-ease-in-out
		tw-border
		tw-border-transparent
		has-[:checked]:tw-border-brand-800
		group-data-[selecting=true]/pages:tw-cursor-pointer
		group-data-[selecting=false]/pages:tw-cursor-default
		"
		data-url={ page.Url }
		data-id={ page.ID }
		onclick="handleSelect(this)"
	>
		<header class="page-card--header">
			<h4 class="page-card--title">
				<a href={ templ.SafeURL(page.Url) } target="_blank" rel="noopener noreferrer">
					if page.Title.Valid {
						{ page.Title.String }
					} else {
						{ formatURL(page.Url) }
					}
				</a>
			</h4>
			if page.Title.Valid {
				<button
					type="button"
					onclick="copyText(this)"
					class="tw-group page-card--link"
				>
					<div
						class="
					tw-hidden
					group-data-[failed=true]:tw-block
					tw-size-4
					"
					>
						@icons.Cross()
					</div>
					<div
						class="
					tw-hidden
					group-data-[copied=true]:tw-block
					tw-size-4
					"
					>
						@icons.Check()
					</div>
					<div
						class="
					group-data-[copied=true]:tw-hidden
					group-data-[failed=false]:tw-hidden
					tw-size-4
					"
					>
						@icons.Link()
					</div>
					<span>{ formatURL(page.Url) }</span>
				</button>
			}
		</header>
		<main class="page-card--main">
			<p class="page-card--description">
				if page.Description.Valid {
					{ page.Description.String }
				}
			</p>
		</main>
		<footer>
			<span class="tw-text-sm">{ page.Updated.Time.Format("02/01 3:04PM") }</span>
			<div class={ Anchor(page.ID) }>
				<input
					class="tw-hidden"
					name="page-id"
					type="checkbox"
				/>
				<button
					class="tw-size-6 tw-relative"
					id={ fmt.Sprintf("popover-trigger-%s", page.ID) }
					popovertarget={ fmt.Sprintf("popover-%s", page.ID) }
				>
					@icons.Ellipsis()
				</button>
				@Popup(page)
			</div>
		</footer>
	</article>
}

templ Popup(page queries.Page) {
	<div
		class={ "page-card--popover", Anchored(page.ID) }
		id={ fmt.Sprintf("popover-%s", page.ID) }
		popover
	>
		<ul class="page-card--popover-list">
			<li class="page-card--popover-element">
				@icons.Clipboard()
				<button data-url={ page.Url } onclick="copyText(this.getAttribute('data-url'))">Copy</button>
			</li>
			<li class="page-card--popover-element">
				@icons.Open()
				<a href={ templ.SafeURL(page.Url) } target="_blank" rel="noopener noreferrer">Open</a>
			</li>
			<li class="page-card--popover-element">
				@icons.Archive()
				<button
					hx-delete={ fmt.Sprintf("/app/page/%s", page.ID) }
					hx-target-error="#messages"
					hx-swap="delete"
					hx-target="closest .page-card"
				>
					Delete
				</button>
			</li>
		</ul>
	</div>
}

func getanchor(id string) string {
	return fmt.Sprintf("--%s", id)
}

css Anchor(id string) {
	anchor-name: { getanchor(id) };
}

css Anchored(id string) {
	inset: { templ.SafeCSSProperty(fmt.Sprintf("auto anchor(%s left) anchor(%s top) auto ", getanchor(id), getanchor(id))) };
}

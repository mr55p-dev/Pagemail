package render

import (
	"fmt"
	"github.com/mr55p-dev/pagemail/db/queries"
	"net/url"
	"strings"
)

func formatURL(inp string) string {
	parsed, err := url.Parse(inp)
	if err != nil {
		return inp
	}
	return fmt.Sprintf("%s%s", strings.TrimPrefix(parsed.Host, "www."), parsed.Path)
}

templ PageCard(page queries.Page) {
	<div class="page-card">
		<h4 class="page-card--title">
			<a href={ templ.SafeURL(page.Url) } target="_blank" rel="noopener noreferrer">
				if page.Title.Valid {
					{ page.Title.String }
				} else {
					{ formatURL(page.Url) }
				}
			</a>
		</h4>
		<p class="page-card--description">
			if page.Description.Valid {
				{ page.Description.String }
			}
		</p>
		<div class="tw-col-span-3">
			<span class="tw-text-sm tw-text-stone-600">{ page.Updated.Format("02/01 3:04PM") }</span>
		</div>
		<button
			hx-delete={ fmt.Sprintf("/app/page/%s", page.ID) }
			hx-target-error="#messages"
			hx-swap="delete"
			hx-target="closest .page-card"
			class="
				tw-col-span-1 tw-place-self-center
				tw-size-5 tw-rounded-full
				hover:tw-text-red-600
			"
		>
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"></path>
			</svg>
		</button>
		<div class={ "tw-relative page-card--popover-wrapper", Anchor(page.ID) }>
			<button
				class="tw-size-6 tw-relative"
				id={ fmt.Sprintf("popover-trigger-%s", page.ID) }
				popovertarget={ fmt.Sprintf("popover-%s", page.ID) }
			>
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
				</svg>
			</button>
			<div
				class={ "page-card--popover", Anchored(page.ID) }
				id={ fmt.Sprintf("popover-%s", page.ID) }
				popover
			>
				<p>Copy</p>
				<p>Open</p>
				<p>Delete</p>
			</div>
		</div>
	</div>
}

func getanchor(id string) string {
	return fmt.Sprintf("--%s", id)
}

css Anchor(id string) {
	anchor-name: { getanchor(id) };
}

css Anchored(id string) {
	top: { fmt.Sprintf("anchor(%s top)", getanchor(id)) };
	left: { fmt.Sprintf("anchor(%s left)", getanchor(id)) };
}

package render

import (
	"fmt"
	"github.com/mr55p-dev/pagemail/db/queries"
	"net/url"
	"strings"
)

func formatURL(inp string) string {
	parsed, err := url.Parse(inp)
	if err != nil {
		return inp
	}
	return fmt.Sprintf("%s%s", strings.TrimPrefix(parsed.Host, "www."), parsed.Path)
}

templ PageCard(page queries.Page) {
	<section class="page-card">
		<header class="page-card--header">
			<h4 class="page-card--title">
				<a href={ templ.SafeURL(page.Url) } target="_blank" rel="noopener noreferrer">
					if page.Title.Valid {
						{ page.Title.String }
					} else {
						{ formatURL(page.Url) }
					}
				</a>
			</h4>
		</header>
		<main>
			<p class="page-card--description">
				if page.Description.Valid {
					{ page.Description.String }
				}
			</p>
		</main>
		<footer class="tw-flex tw-justify-between tw-w-full">
			<span class="tw-text-sm tw-text-stone-600">{ page.Updated.Format("02/01 3:04PM") }</span>
			<div class={ Anchor(page.ID), "" }>
				<button
					class="tw-size-6 tw-relative"
					id={ fmt.Sprintf("popover-trigger-%s", page.ID) }
					popovertarget={ fmt.Sprintf("popover-%s", page.ID) }
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
					</svg>
				</button>
				@Popup(page)
			</div>
		</footer>
	</section>
}

templ Popup(page queries.Page) {
	<div
		class={ "page-card--popover", Anchored(page.ID) }
		id={ fmt.Sprintf("popover-%s", page.ID) }
		popover
	>
		<ul class="page-card--popover-list">
			<li class="page-card--popover-element">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0 0 13.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 0 1-.75.75H9a.75.75 0 0 1-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 0 1-2.25 2.25H6.75A2.25 2.25 0 0 1 4.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 0 1 1.927-.184"></path>
				</svg>
				<button data-url={ page.Url } onclick="copyText(this.getAttribute('data-url'))">Copy</button>
			</li>
			<li class="page-card--popover-element">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
				</svg>
				<a href={ templ.SafeURL(page.Url) } target="_blank" rel="noopener noreferrer">Open</a>
			</li>
			<li class="page-card--popover-element">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5m6 4.125 2.25 2.25m0 0 2.25 2.25M12 13.875l2.25-2.25M12 13.875l-2.25 2.25M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z"></path>
				</svg>
				<button
					hx-delete={ fmt.Sprintf("/app/page/%s", page.ID) }
					hx-target-error="#messages"
					hx-swap="delete"
					hx-target="closest .page-card"
				>
					Delete
				</button>
			</li>
		</ul>
	</div>
}

func getanchor(id string) string {
	return fmt.Sprintf("--%s", id)
}

css Anchor(id string) {
	anchor-name: { getanchor(id) };
}

css Anchored(id string) {
	inset: { templ.SafeCSSProperty(fmt.Sprintf("auto anchor(%s left) anchor(%s top) auto ", getanchor(id), getanchor(id))) };
}
